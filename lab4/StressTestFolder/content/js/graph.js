/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "maxY": 19440.0, "series": [{"data": [[0.0, 2.0], [0.1, 2.0], [0.2, 301.0], [0.3, 558.0], [0.4, 558.0], [0.5, 573.0], [0.6, 702.0], [0.7, 863.0], [0.8, 863.0], [0.9, 865.0], [1.0, 875.0], [1.1, 875.0], [1.2, 877.0], [1.3, 887.0], [1.4, 893.0], [1.5, 893.0], [1.6, 900.0], [1.7, 907.0], [1.8, 907.0], [1.9, 916.0], [2.0, 924.0], [2.1, 930.0], [2.2, 930.0], [2.3, 937.0], [2.4, 944.0], [2.5, 949.0], [2.6, 949.0], [2.7, 960.0], [2.8, 963.0], [2.9, 963.0], [3.0, 968.0], [3.1, 975.0], [3.2, 981.0], [3.3, 981.0], [3.4, 986.0], [3.5, 996.0], [3.6, 996.0], [3.7, 999.0], [3.8, 1000.0], [3.9, 1010.0], [4.0, 1010.0], [4.1, 1014.0], [4.2, 1024.0], [4.3, 1024.0], [4.4, 1030.0], [4.5, 1036.0], [4.6, 1043.0], [4.7, 1043.0], [4.8, 1047.0], [4.9, 1057.0], [5.0, 1057.0], [5.1, 1062.0], [5.2, 1069.0], [5.3, 1073.0], [5.4, 1073.0], [5.5, 1081.0], [5.6, 1088.0], [5.7, 1093.0], [5.8, 1093.0], [5.9, 1105.0], [6.0, 1106.0], [6.1, 1106.0], [6.2, 1108.0], [6.3, 1117.0], [6.4, 1123.0], [6.5, 1123.0], [6.6, 1129.0], [6.7, 1146.0], [6.8, 1146.0], [6.9, 1300.0], [7.0, 1441.0], [7.1, 2122.0], [7.2, 2122.0], [7.3, 2130.0], [7.4, 2134.0], [7.5, 2134.0], [7.6, 2141.0], [7.7, 2147.0], [7.8, 2156.0], [7.9, 2156.0], [8.0, 2165.0], [8.1, 2170.0], [8.2, 2177.0], [8.3, 2177.0], [8.4, 2184.0], [8.5, 2191.0], [8.6, 2191.0], [8.7, 2194.0], [8.8, 2201.0], [8.9, 2207.0], [9.0, 2207.0], [9.1, 2213.0], [9.2, 2219.0], [9.3, 2219.0], [9.4, 2225.0], [9.5, 2233.0], [9.6, 2238.0], [9.7, 2238.0], [9.8, 2242.0], [9.9, 2247.0], [10.0, 2247.0], [10.1, 2253.0], [10.2, 2264.0], [10.3, 2269.0], [10.4, 2269.0], [10.5, 2273.0], [10.6, 2283.0], [10.7, 2290.0], [10.8, 2290.0], [10.9, 2292.0], [11.0, 2301.0], [11.1, 2301.0], [11.2, 2303.0], [11.3, 2311.0], [11.4, 2323.0], [11.5, 2323.0], [11.6, 2329.0], [11.7, 2333.0], [11.8, 2333.0], [11.9, 2340.0], [12.0, 2349.0], [12.1, 2353.0], [12.2, 2353.0], [12.3, 2360.0], [12.4, 2366.0], [12.5, 2366.0], [12.6, 2372.0], [12.7, 2381.0], [12.8, 2383.0], [12.9, 2383.0], [13.0, 2386.0], [13.1, 2388.0], [13.2, 2391.0], [13.3, 2391.0], [13.4, 2392.0], [13.5, 2393.0], [13.6, 2393.0], [13.7, 2397.0], [13.8, 2405.0], [13.9, 2427.0], [14.0, 2427.0], [14.1, 2434.0], [14.2, 2437.0], [14.3, 2437.0], [14.4, 2445.0], [14.5, 2452.0], [14.6, 2462.0], [14.7, 2462.0], [14.8, 2467.0], [14.9, 2472.0], [15.0, 2472.0], [15.1, 2481.0], [15.2, 2488.0], [15.3, 2495.0], [15.4, 2495.0], [15.5, 2497.0], [15.6, 2506.0], [15.7, 2511.0], [15.8, 2511.0], [15.9, 2520.0], [16.0, 2524.0], [16.1, 2524.0], [16.2, 2534.0], [16.3, 2542.0], [16.4, 2542.0], [16.5, 2542.0], [16.6, 2553.0], [16.7, 2556.0], [16.8, 2556.0], [16.9, 2561.0], [17.0, 2568.0], [17.1, 2578.0], [17.2, 2578.0], [17.3, 2582.0], [17.4, 2589.0], [17.5, 2589.0], [17.6, 2596.0], [17.7, 2601.0], [17.8, 2610.0], [17.9, 2610.0], [18.0, 2613.0], [18.1, 2620.0], [18.2, 2624.0], [18.3, 2624.0], [18.4, 2636.0], [18.5, 2639.0], [18.6, 2639.0], [18.7, 2648.0], [18.8, 2655.0], [18.9, 2661.0], [19.0, 2661.0], [19.1, 2664.0], [19.2, 3362.0], [19.3, 3362.0], [19.4, 3504.0], [19.5, 3820.0], [19.6, 4261.0], [19.7, 4261.0], [19.8, 4276.0], [19.9, 4285.0], [20.0, 4285.0], [20.1, 4287.0], [20.2, 4293.0], [20.3, 4299.0], [20.4, 4299.0], [20.5, 4309.0], [20.6, 4317.0], [20.7, 4322.0], [20.8, 4322.0], [20.9, 4330.0], [21.0, 4333.0], [21.1, 4333.0], [21.2, 4342.0], [21.3, 4347.0], [21.4, 4349.0], [21.5, 4349.0], [21.6, 4352.0], [21.7, 4352.0], [21.8, 4352.0], [21.9, 4376.0], [22.0, 4382.0], [22.1, 4388.0], [22.2, 4388.0], [22.3, 4393.0], [22.4, 4398.0], [22.5, 4398.0], [22.6, 4405.0], [22.7, 4411.0], [22.8, 4421.0], [22.9, 4421.0], [23.0, 4428.0], [23.1, 4432.0], [23.2, 4440.0], [23.3, 4440.0], [23.4, 4446.0], [23.5, 4450.0], [23.6, 4450.0], [23.7, 4460.0], [23.8, 4465.0], [23.9, 4486.0], [24.0, 4486.0], [24.1, 4494.0], [24.2, 4500.0], [24.3, 4500.0], [24.4, 4505.0], [24.5, 4515.0], [24.6, 4515.0], [24.7, 4515.0], [24.8, 4527.0], [24.9, 4531.0], [25.0, 4531.0], [25.1, 4536.0], [25.2, 4540.0], [25.3, 4541.0], [25.4, 4541.0], [25.5, 4545.0], [25.6, 4558.0], [25.7, 4563.0], [25.8, 4563.0], [25.9, 4570.0], [26.0, 4576.0], [26.1, 4576.0], [26.2, 4586.0], [26.3, 4586.0], [26.4, 4595.0], [26.5, 4595.0], [26.6, 4603.0], [26.7, 4612.0], [26.8, 4612.0], [26.9, 4616.0], [27.0, 4621.0], [27.1, 4632.0], [27.2, 4632.0], [27.3, 4636.0], [27.4, 4644.0], [27.5, 4644.0], [27.6, 4654.0], [27.7, 4661.0], [27.8, 4668.0], [27.9, 4668.0], [28.0, 4671.0], [28.1, 4682.0], [28.2, 4687.0], [28.3, 4687.0], [28.4, 4694.0], [28.5, 4703.0], [28.6, 4703.0], [28.7, 4705.0], [28.8, 4712.0], [28.9, 4721.0], [29.0, 4721.0], [29.1, 4728.0], [29.2, 4733.0], [29.3, 4733.0], [29.4, 4740.0], [29.5, 4752.0], [29.6, 4758.0], [29.7, 4758.0], [29.8, 4766.0], [29.9, 4771.0], [30.0, 4771.0], [30.1, 4775.0], [30.2, 4782.0], [30.3, 4790.0], [30.4, 4790.0], [30.5, 4795.0], [30.6, 4805.0], [30.7, 4807.0], [30.8, 4807.0], [30.9, 4810.0], [31.0, 4819.0], [31.1, 4819.0], [31.2, 4824.0], [31.3, 4830.0], [31.4, 4839.0], [31.5, 4839.0], [31.6, 4847.0], [31.7, 4853.0], [31.8, 4853.0], [31.9, 4859.0], [32.0, 4867.0], [32.1, 4873.0], [32.2, 4873.0], [32.3, 4879.0], [32.4, 4889.0], [32.5, 4889.0], [32.6, 4893.0], [32.7, 4902.0], [32.8, 4908.0], [32.9, 4908.0], [33.0, 4910.0], [33.1, 4914.0], [33.2, 4923.0], [33.3, 4923.0], [33.4, 4931.0], [33.5, 4937.0], [33.6, 4937.0], [33.7, 4941.0], [33.8, 4951.0], [33.9, 4957.0], [34.0, 4957.0], [34.1, 4965.0], [34.2, 4968.0], [34.3, 4968.0], [34.4, 4974.0], [34.5, 4981.0], [34.6, 4985.0], [34.7, 4985.0], [34.8, 4993.0], [34.9, 5001.0], [35.0, 5001.0], [35.1, 5009.0], [35.2, 5011.0], [35.3, 5020.0], [35.4, 5020.0], [35.5, 5026.0], [35.6, 5034.0], [35.7, 5041.0], [35.8, 5041.0], [35.9, 5049.0], [36.0, 5052.0], [36.1, 5052.0], [36.2, 5066.0], [36.3, 5071.0], [36.4, 5078.0], [36.5, 5078.0], [36.6, 5079.0], [36.7, 5092.0], [36.8, 5092.0], [36.9, 5102.0], [37.0, 5109.0], [37.1, 5113.0], [37.2, 5113.0], [37.3, 5121.0], [37.4, 5127.0], [37.5, 5135.0], [37.6, 5135.0], [37.7, 5145.0], [37.8, 5149.0], [37.9, 5149.0], [38.0, 5154.0], [38.1, 5164.0], [38.2, 5169.0], [38.3, 5169.0], [38.4, 5171.0], [38.5, 5182.0], [38.6, 5182.0], [38.7, 5190.0], [38.8, 5196.0], [38.9, 5203.0], [39.0, 5203.0], [39.1, 5213.0], [39.2, 5219.0], [39.3, 5219.0], [39.4, 5227.0], [39.5, 5235.0], [39.6, 5239.0], [39.7, 5239.0], [39.8, 5245.0], [39.9, 5255.0], [40.0, 5261.0], [40.1, 5261.0], [40.2, 5269.0], [40.3, 5273.0], [40.4, 5273.0], [40.5, 5283.0], [40.6, 5286.0], [40.7, 5298.0], [40.8, 5298.0], [40.9, 5300.0], [41.0, 5309.0], [41.1, 5309.0], [41.2, 5313.0], [41.3, 5321.0], [41.4, 5329.0], [41.5, 5329.0], [41.6, 5422.0], [41.7, 5425.0], [41.8, 5425.0], [41.9, 5435.0], [42.0, 5441.0], [42.1, 5449.0], [42.2, 5449.0], [42.3, 5450.0], [42.4, 5454.0], [42.5, 5461.0], [42.6, 5461.0], [42.7, 5462.0], [42.8, 5471.0], [42.9, 5471.0], [43.0, 5475.0], [43.1, 5483.0], [43.2, 5488.0], [43.3, 5488.0], [43.4, 5502.0], [43.5, 5513.0], [43.6, 5513.0], [43.7, 5514.0], [43.8, 5530.0], [43.9, 5538.0], [44.0, 5538.0], [44.1, 5542.0], [44.2, 5546.0], [44.3, 5546.0], [44.4, 5548.0], [44.5, 5552.0], [44.6, 5555.0], [44.7, 5555.0], [44.8, 5624.0], [44.9, 5625.0], [45.0, 5645.0], [45.1, 5645.0], [45.2, 5651.0], [45.3, 5654.0], [45.4, 5654.0], [45.5, 5665.0], [45.6, 5731.0], [45.7, 5742.0], [45.8, 5742.0], [45.9, 5751.0], [46.0, 5764.0], [46.1, 5764.0], [46.2, 5825.0], [46.3, 5843.0], [46.4, 5848.0], [46.5, 5848.0], [46.6, 5852.0], [46.7, 5859.0], [46.8, 5859.0], [46.9, 5866.0], [47.0, 5930.0], [47.1, 5938.0], [47.2, 5938.0], [47.3, 5941.0], [47.4, 5947.0], [47.5, 5950.0], [47.6, 5950.0], [47.7, 5954.0], [47.8, 5959.0], [47.9, 5959.0], [48.0, 5967.0], [48.1, 6147.0], [48.2, 6151.0], [48.3, 6151.0], [48.4, 6167.0], [48.5, 6570.0], [48.6, 6570.0], [48.7, 6710.0], [48.8, 6976.0], [48.9, 6985.0], [49.0, 6985.0], [49.1, 6995.0], [49.2, 7000.0], [49.3, 7000.0], [49.4, 7002.0], [49.5, 7014.0], [49.6, 7022.0], [49.7, 7022.0], [49.8, 7025.0], [49.9, 7034.0], [50.0, 7037.0], [50.1, 7037.0], [50.2, 7049.0], [50.3, 7054.0], [50.4, 7054.0], [50.5, 7059.0], [50.6, 7063.0], [50.7, 7069.0], [50.8, 7069.0], [50.9, 7078.0], [51.0, 7085.0], [51.1, 7085.0], [51.2, 7091.0], [51.3, 7098.0], [51.4, 7104.0], [51.5, 7104.0], [51.6, 7106.0], [51.7, 7115.0], [51.8, 7115.0], [51.9, 7122.0], [52.0, 7127.0], [52.1, 7137.0], [52.2, 7137.0], [52.3, 7145.0], [52.4, 7155.0], [52.5, 7164.0], [52.6, 7164.0], [52.7, 7164.0], [52.8, 7173.0], [52.9, 7173.0], [53.0, 7182.0], [53.1, 7186.0], [53.2, 7196.0], [53.3, 7196.0], [53.4, 7202.0], [53.5, 7214.0], [53.6, 7214.0], [53.7, 7219.0], [53.8, 7230.0], [53.9, 7241.0], [54.0, 7241.0], [54.1, 7244.0], [54.2, 7264.0], [54.3, 7264.0], [54.4, 7265.0], [54.5, 7272.0], [54.6, 7278.0], [54.7, 7278.0], [54.8, 7280.0], [54.9, 7287.0], [55.0, 7293.0], [55.1, 7293.0], [55.2, 7299.0], [55.3, 7302.0], [55.4, 7302.0], [55.5, 7308.0], [55.6, 7313.0], [55.7, 7318.0], [55.8, 7318.0], [55.9, 7319.0], [56.0, 7325.0], [56.1, 7325.0], [56.2, 7326.0], [56.3, 7327.0], [56.4, 7327.0], [56.5, 7327.0], [56.6, 7335.0], [56.7, 7340.0], [56.8, 7340.0], [56.9, 7350.0], [57.0, 7362.0], [57.1, 7365.0], [57.2, 7365.0], [57.3, 7368.0], [57.4, 7379.0], [57.5, 7381.0], [57.6, 7381.0], [57.7, 7383.0], [57.8, 7390.0], [57.9, 7390.0], [58.0, 7395.0], [58.1, 7399.0], [58.2, 7403.0], [58.3, 7403.0], [58.4, 7413.0], [58.5, 7423.0], [58.6, 7423.0], [58.7, 7425.0], [58.8, 7428.0], [58.9, 7431.0], [59.0, 7431.0], [59.1, 7457.0], [59.2, 7457.0], [59.3, 7457.0], [59.4, 7464.0], [59.5, 7473.0], [59.6, 7480.0], [59.7, 7480.0], [59.8, 7496.0], [59.9, 7499.0], [60.0, 7507.0], [60.1, 7507.0], [60.2, 7555.0], [60.3, 7741.0], [60.4, 7741.0], [60.5, 7744.0], [60.6, 8544.0], [60.7, 9534.0], [60.8, 9534.0], [60.9, 10539.0], [61.0, 11526.0], [61.1, 11526.0], [61.2, 12516.0], [61.3, 13120.0], [61.4, 13123.0], [61.5, 13123.0], [61.6, 13143.0], [61.7, 13237.0], [61.8, 13237.0], [61.9, 13244.0], [62.0, 13333.0], [62.1, 13344.0], [62.2, 13344.0], [62.3, 13418.0], [62.4, 13434.0], [62.5, 13445.0], [62.6, 13445.0], [62.7, 13500.0], [62.8, 13503.0], [62.9, 13503.0], [63.0, 13509.0], [63.1, 13537.0], [63.2, 13693.0], [63.3, 13693.0], [63.4, 13834.0], [63.5, 13839.0], [63.6, 13839.0], [63.7, 14219.0], [63.8, 14223.0], [63.9, 14231.0], [64.0, 14231.0], [64.1, 14239.0], [64.2, 14244.0], [64.3, 14244.0], [64.4, 14344.0], [64.5, 14355.0], [64.6, 14361.0], [64.7, 14361.0], [64.8, 14375.0], [64.9, 14379.0], [65.0, 14387.0], [65.1, 14387.0], [65.2, 14391.0], [65.3, 14400.0], [65.4, 14400.0], [65.5, 14411.0], [65.6, 14419.0], [65.7, 14422.0], [65.8, 14422.0], [65.9, 14430.0], [66.0, 14435.0], [66.1, 14435.0], [66.2, 14455.0], [66.3, 14464.0], [66.4, 14472.0], [66.5, 14472.0], [66.6, 14473.0], [66.7, 14482.0], [66.8, 14482.0], [66.9, 14489.0], [67.0, 14508.0], [67.1, 14514.0], [67.2, 14514.0], [67.3, 14524.0], [67.4, 14721.0], [67.5, 14796.0], [67.6, 14796.0], [67.7, 14821.0], [67.8, 14840.0], [67.9, 14840.0], [68.0, 16181.0], [68.1, 16189.0], [68.2, 16208.0], [68.3, 16208.0], [68.4, 16218.0], [68.5, 16225.0], [68.6, 16225.0], [68.7, 16229.0], [68.8, 16238.0], [68.9, 16242.0], [69.0, 16242.0], [69.1, 16249.0], [69.2, 16257.0], [69.3, 16257.0], [69.4, 16266.0], [69.5, 16339.0], [69.6, 16378.0], [69.7, 16378.0], [69.8, 16385.0], [69.9, 16392.0], [70.0, 16397.0], [70.1, 16397.0], [70.2, 16408.0], [70.3, 16413.0], [70.4, 16413.0], [70.5, 16419.0], [70.6, 16423.0], [70.7, 16440.0], [70.8, 16440.0], [70.9, 16446.0], [71.0, 16452.0], [71.1, 16452.0], [71.2, 16469.0], [71.3, 16471.0], [71.4, 16497.0], [71.5, 16497.0], [71.6, 16506.0], [71.7, 16506.0], [71.8, 16506.0], [71.9, 16530.0], [72.0, 16537.0], [72.1, 16555.0], [72.2, 16555.0], [72.3, 16558.0], [72.4, 16569.0], [72.5, 16569.0], [72.6, 16569.0], [72.7, 16586.0], [72.8, 16593.0], [72.9, 16593.0], [73.0, 16603.0], [73.1, 16604.0], [73.2, 16631.0], [73.3, 16631.0], [73.4, 16636.0], [73.5, 16640.0], [73.6, 16640.0], [73.7, 16646.0], [73.8, 16658.0], [73.9, 16674.0], [74.0, 16674.0], [74.1, 16676.0], [74.2, 16684.0], [74.3, 16684.0], [74.4, 16689.0], [74.5, 16694.0], [74.6, 16704.0], [74.7, 16704.0], [74.8, 16709.0], [74.9, 16718.0], [75.0, 16724.0], [75.1, 16724.0], [75.2, 16732.0], [75.3, 16735.0], [75.4, 16735.0], [75.5, 16740.0], [75.6, 16746.0], [75.7, 16764.0], [75.8, 16764.0], [75.9, 16769.0], [76.0, 16773.0], [76.1, 16773.0], [76.2, 16782.0], [76.3, 16786.0], [76.4, 16793.0], [76.5, 16793.0], [76.6, 16802.0], [76.7, 16813.0], [76.8, 16813.0], [76.9, 16816.0], [77.0, 16819.0], [77.1, 16829.0], [77.2, 16829.0], [77.3, 16835.0], [77.4, 16840.0], [77.5, 16852.0], [77.6, 16852.0], [77.7, 16861.0], [77.8, 16861.0], [77.9, 16861.0], [78.0, 16867.0], [78.1, 16881.0], [78.2, 16883.0], [78.3, 16883.0], [78.4, 16892.0], [78.5, 16898.0], [78.6, 16898.0], [78.7, 16906.0], [78.8, 16911.0], [78.9, 16917.0], [79.0, 16917.0], [79.1, 16923.0], [79.2, 16934.0], [79.3, 16934.0], [79.4, 16937.0], [79.5, 16943.0], [79.6, 16951.0], [79.7, 16951.0], [79.8, 16958.0], [79.9, 16968.0], [80.0, 16977.0], [80.1, 16977.0], [80.2, 16981.0], [80.3, 16991.0], [80.4, 16991.0], [80.5, 16992.0], [80.6, 16999.0], [80.7, 17073.0], [80.8, 17073.0], [80.9, 17079.0], [81.0, 17083.0], [81.1, 17083.0], [81.2, 17090.0], [81.3, 17105.0], [81.4, 17116.0], [81.5, 17116.0], [81.6, 17124.0], [81.7, 17127.0], [81.8, 17127.0], [81.9, 17132.0], [82.0, 17144.0], [82.1, 17149.0], [82.2, 17149.0], [82.3, 17154.0], [82.4, 17155.0], [82.5, 17156.0], [82.6, 17156.0], [82.7, 17160.0], [82.8, 17161.0], [82.9, 17161.0], [83.0, 17162.0], [83.1, 17170.0], [83.2, 17178.0], [83.3, 17178.0], [83.4, 17180.0], [83.5, 17238.0], [83.6, 17238.0], [83.7, 17251.0], [83.8, 17255.0], [83.9, 17261.0], [84.0, 17261.0], [84.1, 17264.0], [84.2, 17267.0], [84.3, 17267.0], [84.4, 17271.0], [84.5, 17273.0], [84.6, 17291.0], [84.7, 17291.0], [84.8, 17293.0], [84.9, 17324.0], [85.0, 17329.0], [85.1, 17329.0], [85.2, 17352.0], [85.3, 17353.0], [85.4, 17353.0], [85.5, 17355.0], [85.6, 17359.0], [85.7, 17360.0], [85.8, 17360.0], [85.9, 17374.0], [86.0, 17382.0], [86.1, 17382.0], [86.2, 17422.0], [86.3, 17426.0], [86.4, 17444.0], [86.5, 17444.0], [86.6, 17452.0], [86.7, 17460.0], [86.8, 17460.0], [86.9, 17461.0], [87.0, 17469.0], [87.1, 17472.0], [87.2, 17472.0], [87.3, 17541.0], [87.4, 17544.0], [87.5, 17554.0], [87.6, 17554.0], [87.7, 17559.0], [87.8, 17568.0], [87.9, 17568.0], [88.0, 17574.0], [88.1, 17644.0], [88.2, 17652.0], [88.3, 17652.0], [88.4, 17661.0], [88.5, 17664.0], [88.6, 17664.0], [88.7, 17665.0], [88.8, 17673.0], [88.9, 17766.0], [89.0, 17766.0], [89.1, 17773.0], [89.2, 17782.0], [89.3, 17782.0], [89.4, 17784.0], [89.5, 17793.0], [89.6, 17801.0], [89.7, 17801.0], [89.8, 17806.0], [89.9, 17816.0], [90.0, 17842.0], [90.1, 17842.0], [90.2, 17852.0], [90.3, 17855.0], [90.4, 17855.0], [90.5, 17866.0], [90.6, 17866.0], [90.7, 17867.0], [90.8, 17867.0], [90.9, 18144.0], [91.0, 18152.0], [91.1, 18152.0], [91.2, 18156.0], [91.3, 18166.0], [91.4, 18170.0], [91.5, 18170.0], [91.6, 18186.0], [91.7, 18194.0], [91.8, 18194.0], [91.9, 18199.0], [92.0, 18206.0], [92.1, 18214.0], [92.2, 18214.0], [92.3, 18222.0], [92.4, 18250.0], [92.5, 18258.0], [92.6, 18258.0], [92.7, 18262.0], [92.8, 18270.0], [92.9, 18270.0], [93.0, 18272.0], [93.1, 18283.0], [93.2, 18290.0], [93.3, 18290.0], [93.4, 18296.0], [93.5, 18303.0], [93.6, 18303.0], [93.7, 18312.0], [93.8, 18321.0], [93.9, 18324.0], [94.0, 18324.0], [94.1, 18333.0], [94.2, 18362.0], [94.3, 18362.0], [94.4, 18395.0], [94.5, 18447.0], [94.6, 18455.0], [94.7, 18455.0], [94.8, 18503.0], [94.9, 18508.0], [95.0, 18534.0], [95.1, 18534.0], [95.2, 18826.0], [95.3, 18840.0], [95.4, 18840.0], [95.5, 18853.0], [95.6, 18878.0], [95.7, 18885.0], [95.8, 18885.0], [95.9, 18887.0], [96.0, 18890.0], [96.1, 18890.0], [96.2, 18898.0], [96.3, 18900.0], [96.4, 18900.0], [96.5, 18900.0], [96.6, 18910.0], [96.7, 18915.0], [96.8, 18915.0], [96.9, 18920.0], [97.0, 18926.0], [97.1, 18933.0], [97.2, 18933.0], [97.3, 18958.0], [97.4, 18968.0], [97.5, 18974.0], [97.6, 18974.0], [97.7, 19009.0], [97.8, 19037.0], [97.9, 19037.0], [98.0, 19040.0], [98.1, 19040.0], [98.2, 19185.0], [98.3, 19185.0], [98.4, 19197.0], [98.5, 19210.0], [98.6, 19210.0], [98.7, 19216.0], [98.8, 19222.0], [98.9, 19242.0], [99.0, 19242.0], [99.1, 19263.0], [99.2, 19265.0], [99.3, 19265.0], [99.4, 19289.0], [99.5, 19338.0], [99.6, 19343.0], [99.7, 19343.0], [99.8, 19361.0], [99.9, 19440.0]], "isOverall": false, "label": "Stress test", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 21.0, "series": [{"data": [[0.0, 1.0], [700.0, 1.0], [800.0, 6.0], [900.0, 16.0], [1000.0, 15.0], [1100.0, 7.0], [1300.0, 1.0], [1400.0, 1.0], [2100.0, 12.0], [2300.0, 20.0], [2200.0, 16.0], [2400.0, 13.0], [2500.0, 15.0], [2600.0, 11.0], [3300.0, 1.0], [3500.0, 1.0], [3800.0, 1.0], [4300.0, 15.0], [4200.0, 6.0], [4500.0, 17.0], [4600.0, 14.0], [4400.0, 12.0], [4700.0, 15.0], [4800.0, 15.0], [4900.0, 16.0], [5000.0, 14.0], [5100.0, 15.0], [5200.0, 14.0], [5300.0, 5.0], [5600.0, 6.0], [5500.0, 10.0], [5400.0, 13.0], [5800.0, 6.0], [5700.0, 4.0], [6100.0, 3.0], [5900.0, 8.0], [6500.0, 1.0], [6900.0, 3.0], [6700.0, 1.0], [7100.0, 14.0], [7000.0, 16.0], [7400.0, 13.0], [7300.0, 21.0], [7200.0, 14.0], [7500.0, 2.0], [7700.0, 2.0], [8500.0, 1.0], [9500.0, 1.0], [10500.0, 1.0], [11500.0, 1.0], [12500.0, 1.0], [13200.0, 2.0], [13300.0, 2.0], [13100.0, 3.0], [13500.0, 4.0], [13400.0, 3.0], [13800.0, 2.0], [13600.0, 1.0], [14300.0, 7.0], [14200.0, 5.0], [14800.0, 2.0], [14700.0, 2.0], [14500.0, 3.0], [14400.0, 12.0], [16300.0, 5.0], [16200.0, 9.0], [16100.0, 2.0], [16600.0, 12.0], [17300.0, 9.0], [17200.0, 10.0], [17400.0, 8.0], [17100.0, 16.0], [17000.0, 4.0], [16900.0, 15.0], [16800.0, 15.0], [16700.0, 14.0], [16500.0, 10.0], [16400.0, 10.0], [18200.0, 11.0], [18300.0, 7.0], [17600.0, 6.0], [17500.0, 6.0], [17800.0, 9.0], [18400.0, 2.0], [18100.0, 8.0], [17700.0, 5.0], [18500.0, 3.0], [18900.0, 10.0], [18800.0, 8.0], [19000.0, 4.0], [19200.0, 7.0], [19100.0, 2.0], [19300.0, 3.0], [19400.0, 1.0], [300.0, 1.0], [500.0, 2.0]], "isOverall": false, "label": "Stress test", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 19400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 45.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1 500ms"], [2, "Requests having \nresponse time > 1 500ms"], [3, "Requests in error"]], "maxY": 490.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 45.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1 500ms", "isController": false}, {"data": [[2.0, 490.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1 500ms", "isController": false}, {"data": [[3.0, 185.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 286.92086330935234, "minX": 1.6831194E12, "maxY": 312.4956970740104, "series": [{"data": [[1.6831194E12, 286.92086330935234], [1.68311946E12, 312.4956970740104]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68311946E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.0, "maxY": 19389.0, "series": [{"data": [[3.0, 19389.0], [4.0, 19361.0], [5.0, 19216.0], [6.0, 19242.0], [7.0, 19263.0], [8.0, 19289.0], [9.0, 19265.0], [10.0, 19197.0], [11.0, 19210.0], [12.0, 19185.0], [13.0, 19040.0], [14.0, 19222.0], [15.0, 19040.0], [17.0, 18967.5], [18.0, 18958.0], [19.0, 19037.0], [20.0, 18900.0], [21.0, 18898.0], [22.0, 18826.0], [24.0, 18941.5], [25.0, 18887.0], [30.0, 18900.0], [42.0, 17983.0], [45.0, 17073.0], [44.0, 16999.0], [47.0, 17105.0], [46.0, 17084.0], [49.0, 17116.0], [50.0, 17125.5], [53.0, 17170.0], [52.0, 17149.0], [55.0, 17293.0], [54.0, 17227.666666666668], [57.0, 17324.0], [59.0, 17424.0], [61.0, 18888.625], [60.0, 17469.0], [83.0, 565.5], [119.0, 17769.5], [123.0, 17800.0], [122.0, 17783.0], [127.0, 18186.0], [126.0, 18170.0], [125.0, 18086.8], [135.0, 16218.0], [133.0, 16194.5], [132.0, 16189.0], [131.0, 18218.0], [128.0, 18199.666666666668], [143.0, 937.0], [142.0, 6064.333333333333], [141.0, 887.0000000000001], [140.0, 16261.5], [138.0, 16243.5], [136.0, 16232.0], [150.0, 12771.75], [149.0, 993.6666666666666], [146.0, 4882.0], [145.0, 15066.81818181818], [144.0, 951.0], [151.0, 16740.5], [147.0, 16649.75], [159.0, 6585.666666666667], [157.0, 1036.0], [153.0, 8899.5], [152.0, 6267.333333333333], [158.0, 16907.5], [156.0, 16861.0], [155.0, 16793.0], [163.0, 3427.4285714285716], [161.0, 7768.0], [160.0, 6165.333333333333], [162.0, 13318.25], [167.0, 16489.75], [166.0, 16440.0], [165.0, 16857.75], [175.0, 16728.0], [172.0, 16687.4], [170.0, 16614.0], [169.0, 16554.666666666668], [183.0, 16870.333333333332], [180.0, 16839.0], [178.0, 16817.5], [176.0, 16780.6], [186.0, 9105.5], [191.0, 16958.0], [190.0, 16951.0], [189.0, 16934.333333333332], [188.0, 16917.0], [184.0, 16898.666666666668], [194.0, 16991.0], [193.0, 16979.0], [192.0, 16968.0], [207.0, 17461.0], [205.0, 17516.6], [203.0, 17852.0], [214.0, 18319.0], [213.0, 18290.0], [212.0, 17918.0], [210.0, 17550.5], [208.0, 17360.0], [223.0, 17592.81818181818], [218.0, 18489.4], [216.0, 18363.333333333332], [231.0, 18033.5], [230.0, 17273.0], [229.0, 17568.0], [227.0, 17765.0], [226.0, 17866.0], [224.0, 17459.333333333332], [239.0, 13471.0], [238.0, 13805.0], [232.0, 13500.0], [245.0, 2.0], [244.0, 13814.2], [253.0, 14344.0], [252.0, 13344.5], [251.0, 13344.0], [249.0, 13600.0], [271.0, 14482.0], [268.0, 14463.333333333334], [267.0, 14422.0], [261.0, 14402.0], [257.0, 14367.5], [285.0, 7555.0], [286.0, 6710.0], [284.0, 8544.0], [274.0, 14511.0], [272.0, 14454.0], [283.0, 9534.0], [282.0, 10539.0], [281.0, 11526.0], [280.0, 12516.0], [279.0, 13509.0], [278.0, 14794.5], [302.0, 5489.0], [299.0, 5500.0], [294.0, 5462.2], [289.0, 5433.666666666667], [319.0, 5140.5], [316.0, 2200.6666666666665], [307.0, 7012.6], [315.0, 2187.5], [314.0, 2173.5], [312.0, 5096.6], [310.0, 3364.0], [304.0, 2126.0], [318.0, 7078.0], [311.0, 7037.0], [331.0, 2306.0], [327.0, 6163.4], [326.0, 2276.0], [325.0, 2264.0], [322.0, 2247.3333333333335], [320.0, 2233.0], [334.0, 7188.142857142857], [349.0, 4882.125], [345.0, 5067.727272727273], [341.0, 2386.3333333333335], [339.0, 5848.0], [337.0, 2344.0], [351.0, 7326.0], [350.0, 7327.0], [366.0, 2561.0], [364.0, 2553.0], [361.0, 2526.2], [356.0, 4933.25], [354.0, 2480.6], [363.0, 7403.333333333333], [357.0, 7383.0], [355.0, 7350.0], [353.0, 7330.0], [379.0, 2482.6666666666665], [377.0, 2640.428571428571], [371.0, 5860.333333333332], [370.0, 2589.0], [382.0, 5855.6], [381.0, 5731.0], [376.0, 5571.8], [369.0, 7457.0], [398.0, 5650.0], [394.0, 5728.0], [393.0, 5947.0], [388.0, 6392.8], [384.0, 5941.0], [413.0, 6470.75], [409.0, 5665.0], [408.0, 5741.4], [403.0, 5834.0], [428.0, 4274.0], [425.0, 3504.0], [424.0, 3820.0], [423.0, 4805.0], [422.0, 7431.0], [421.0, 7396.2], [416.0, 7322.0], [447.0, 4384.428571428572], [440.0, 4348.25], [439.0, 4328.333333333333], [433.0, 4301.0], [449.0, 2926.0], [451.0, 501.5], [459.0, 4493.0], [458.0, 4467.25], [453.0, 4436.0], [452.0, 4431.666666666667], [465.0, 4525.8], [464.0, 4505.0], [583.0, 2872.5], [582.0, 1106.0], [581.0, 4931.206896551724], [1.0, 19343.0]], "isOverall": false, "label": "Stress test", "isController": false}, {"data": [[307.5583333333336, 9314.524999999987]], "isOverall": false, "label": "Stress test-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 583.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 342.78333333333336, "minX": 1.6831194E12, "maxY": 2679.983333333333, "series": [{"data": [[1.6831194E12, 843.6833333333333], [1.68311946E12, 2679.983333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6831194E12, 342.78333333333336], [1.68311946E12, 1491.5]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68311946E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1874.1079136690648, "minX": 1.6831194E12, "maxY": 11094.590361445786, "series": [{"data": [[1.6831194E12, 1874.1079136690648], [1.68311946E12, 11094.590361445786]], "isOverall": false, "label": "Stress test", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68311946E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1800.0287769784172, "minX": 1.6831194E12, "maxY": 10935.26678141137, "series": [{"data": [[1.6831194E12, 1800.0287769784172], [1.68311946E12, 10935.26678141137]], "isOverall": false, "label": "Stress test", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68311946E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 15.848920863309353, "minX": 1.6831194E12, "maxY": 2039.977624784853, "series": [{"data": [[1.6831194E12, 15.848920863309353], [1.68311946E12, 2039.977624784853]], "isOverall": false, "label": "Stress test", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68311946E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 558.0, "minX": 1.6831194E12, "maxY": 19440.0, "series": [{"data": [[1.6831194E12, 2664.0], [1.68311946E12, 19440.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6831194E12, 2587.6], [1.68311946E12, 18421.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6831194E12, 2663.04], [1.68311946E12, 19335.55]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6831194E12, 2628.7999999999997], [1.68311946E12, 18951.75]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6831194E12, 558.0], [1.68311946E12, 4486.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6831194E12, 2247.0], [1.68311946E12, 14808.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68311946E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 2.0, "minX": 1.0, "maxY": 19185.0, "series": [{"data": [[2.0, 565.5], [136.0, 7340.0], [75.0, 2430.5], [156.0, 4902.0], [43.0, 999.0], [47.0, 14445.0], [206.0, 17127.0], [25.0, 19185.0], [13.0, 2160.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[4.0, 1071.5], [2.0, 3662.0], [1.0, 10539.0], [136.0, 5938.0], [75.0, 2.0], [156.0, 4352.0], [47.0, 13500.0], [206.0, 17784.0], [13.0, 1000.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 206.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 19185.0, "series": [{"data": [[2.0, 565.5], [136.0, 7340.0], [75.0, 2430.5], [156.0, 4902.0], [43.0, 999.0], [47.0, 14445.0], [206.0, 17127.0], [25.0, 19185.0], [13.0, 2160.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[4.0, 0.0], [2.0, 0.0], [1.0, 0.0], [136.0, 5938.0], [75.0, 0.0], [156.0, 4352.0], [47.0, 13500.0], [206.0, 17784.0], [13.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 206.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 12.0, "minX": 1.6831194E12, "maxY": 12.0, "series": [{"data": [[1.6831194E12, 12.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6831194E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.13333333333333333, "minX": 1.6831194E12, "maxY": 6.733333333333333, "series": [{"data": [[1.6831194E12, 2.183333333333333], [1.68311946E12, 6.733333333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.68311946E12, 1.9]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.68311946E12, 0.8666666666666667]], "isOverall": false, "label": "503", "isController": false}, {"data": [[1.6831194E12, 0.13333333333333333], [1.68311946E12, 0.18333333333333332]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68311946E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.13333333333333333, "minX": 1.6831194E12, "maxY": 6.733333333333333, "series": [{"data": [[1.6831194E12, 2.183333333333333], [1.68311946E12, 6.733333333333333]], "isOverall": false, "label": "Stress test-success", "isController": false}, {"data": [[1.6831194E12, 0.13333333333333333], [1.68311946E12, 2.95]], "isOverall": false, "label": "Stress test-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68311946E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.13333333333333333, "minX": 1.6831194E12, "maxY": 6.733333333333333, "series": [{"data": [[1.6831194E12, 2.183333333333333], [1.68311946E12, 6.733333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.6831194E12, 0.13333333333333333], [1.68311946E12, 2.95]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68311946E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

